{"version":3,"sources":["components/Filter.js","components/Form.js","services/PersonService.js","components/Success.js","components/Error.js","components/ListPersons.js","App.js","index.js"],"names":["Filter","filter","handleFilter","value","onChange","Form","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","id","put","Success","notification","className","Error","incorrect","ListPersons","persons","removePerson","person","name","toLowerCase","includes","map","key","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setFilter","success","setSuccess","error","setError","useEffect","personService","initialPersons","event","target","preventDefault","personObject","setTimeout","newPerson","forEach","update","window","confirm","splice","fetch","catch","remove","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87fd750a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ filter, handleFilter }) => (\r\n    <div>\r\n        filter shown with <input value={filter} onChange={handleFilter} />\r\n    </div>\r\n)\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Form = ({ addName, newName, handleNameChange, newNumber, handleNumberChange }) => (\r\n    <form onSubmit={addName}>\r\n        <div>\r\n            name: <input value={newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n            number: <input value={newNumber} onChange={handleNumberChange} />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nexport default Form","import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.put(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react'\r\n\r\nconst Success = ({ notification }) => {\r\n\r\n    if (notification === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"success\">\r\n            {notification}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Success","import React from 'react'\r\n\r\nconst Error = ({ incorrect }) => {\r\n\r\n    if (incorrect === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"error\">\r\n            {incorrect}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React from 'react'\r\n\r\nconst ListPersons = ({ persons, filter, removePerson }) => {\r\n    return (\r\n        persons.filter(\r\n            person => person.name.toLowerCase().includes(filter.toLowerCase())).map(person => {\r\n                return <div key={person.id}>{person.name} {person.number}\r\n                    <button onClick={() => removePerson(person)}>delete</button>\r\n                </div>\r\n            })\r\n    )\r\n}\r\n\r\nexport default ListPersons","import React, { useEffect, useState } from 'react'\nimport Filter from './components/Filter'\nimport Form from './components/Form'\nimport personService from './services/PersonService'\nimport Success from './components/Success'\nimport Error from './components/Error'\nimport ListPersons from './components/ListPersons'\n\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [success, setSuccess] = useState(null)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPersons => setPersons(initialPersons))\n    }, [])\n\n    const handleFilterChange = (event) => (\n        setFilter(event.target.value)\n    )\n\n    const handleNameChange = (event) => (\n        setNewName(event.target.value)\n    )\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const addName = (event) => {\n        event.preventDefault()\n        const personObject = {\n            name: newName,\n            number: newNumber\n        }\n        setSuccess(`${personObject.name} was added.`)\n        setTimeout(() => { setSuccess(null) }, 3500)\n        personService\n            .create(personObject)\n            .then(newPerson => {\n                persons.forEach(person => {\n                    if (person.name === newName) {\n                        personService.getAll(personObject)\n                            .then(update => {\n                                if (window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)) {\n                                    return (\n                                        personService\n                                            .update(person.id, personObject)\n                                            .then(update => {\n                                                personService\n                                                    .remove(person.id)\n                                                    .then(update => {\n                                                        setPersons(persons.splice(update))\n                                                        personService.getAll().then(fetch => {\n                                                            setPersons(fetch)\n                                                            setSuccess(`${person.name} has been updated.`)\n                                                            setTimeout(() => { setSuccess(null) }, 3500)\n                                                        })\n                                                    })\n                                            })\n                                            .catch(error => {\n                                                personService\n                                                    .getAll()\n                                                    .then(fetch => {\n                                                        setError(`${person.name} was already removed.`)\n                                                        setTimeout(() => { setError(null) }, 3500)\n                                                    })\n                                            })\n                                    )\n                                } else {\n                                    personService\n                                        .remove(person.id)\n                                        .then(remove => {\n                                            setPersons(persons.splice(remove))\n                                            personService\n                                                .getAll()\n                                                .then(fetch => { setPersons(fetch) })\n                                        })\n                                        .catch(error => {\n                                            setError(`${person.name} was already removed.`)\n                                            setTimeout(() => { setError(null) }, 3500)\n                                        })\n                                }\n                            })\n                    } else {\n                        setPersons(persons.concat(newPerson))\n                        setNewName('')\n                        setNewNumber('')\n                    }\n                })\n            })\n    }\n\n    const removePerson = (person) => {\n        if (window.confirm(`Delete ${person.name}`)) {\n            return (\n                personService\n                    .remove(person.id)\n                    .then(remove => {\n                        personService\n                            .getAll()\n                            .then(update => {\n                                setPersons(update)\n                                setSuccess(`${person.name} was removed from phonebook`)\n                                setTimeout(() => { setSuccess(null) }, 3500)\n                            })\n                    })\n            )\n        }\n    }\n\n    return (\n        <div>\n            <Success notification={success} />\n            <Error incorrect={error} />\n            <h2>Phonebook</h2>\n            <Filter filter={filter} handleFilter={handleFilterChange} />\n            <h2>add a new</h2>\n            <Form\n                addName={addName}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n            />\n            <h2>Numbers</h2>\n            <ListPersons persons={persons} filter={filter} removePerson={removePerson} />\n        </div>\n    )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}